@tailwind base;
@tailwind components;
@tailwind utilities;
$white: white;
$black: black;
$dark-orange: darkorange;
$light-grey: grey;
$dark-grey: rgb(39, 39, 39);
$red: red;
@layer utilities {
	/* for rem html el ts of 16px usually */
	/* colours in tw config so can use vars */
	/* text colour */
	.tc-white {
		color: $white;
	}
	.tc-orange {
		color: $dark-orange;
	}
	.tc-grey {
		color: $light-grey;
	}
	.tc-black {
		color: $black;
	}
	.tc-red {
		color: $red;
	}
	/* text size */
	.ts-1 {
		font-size: 1rem;
	}
	.ts-2 {
		font-size: 1.25rem;
	}
	/* text fam */
	.tf-1 {
		font-family: verdana;
	}
	// text inside 
	.ti-orange {
		fill: $dark-orange;
	}
	/* text weight */
	.tw-1 {
		font-weight: 700;
	}
	.tw-2 {
		font-weight: 700;
	}
	/* text case/shift */
	.ts-upper {
		text-transform: uppercase;
	}
	/* text align */
	.ta-centre {
		text-align: center;
	}
	.ta-left {
		text-align: left;
	}
	/* expose  */
	.e-fit {
		object-fit: contain;
	}
	.c-white {
		background-color: $white;
	}
	.c-black {
		background-color: $black;
	}
	.c-grey {
		background-color: $dark-grey;
	}
	.c-none {
		background-color: transparent;
	}
	/* border */
	.bc-black {
		border-color: $black;
	}
	.bc-white {
		border-color: $white;
	}
	.bc-grey {
		border-color: $dark-grey;
	}
	.bw-1 {
		border-width: 1px;
	}
	/* viewport - see config (v1 - v5) */
	/* round */
	.r-1 {
		border-radius: 0.8rem;
	}
	// shadow
	.s-1 {
		box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
	}
	/* w-[100%], max-w-[10rem] */
	/* align */
	/* flex , default is a-row*/
	.a-row {
		display: flex;
		flex-direction: row;
	}
	.a-col {
		display: flex;
		flex-direction: column;
	}
	.ax-start {
		justify-content: flex-start;
	}
	.ax-end {
		justify-content: flex-end;
	}
	.ax-centre {
		justify-content: center;
	}
	.ax-between {
		justify-content: space-between;
	}
	.ay-start {
		align-content: flex-start;
	}
	.ay-centre {
		align-content: center;
	}
	/* default: block, also: flex, grid */
	.hide {
		display: none;
	}
	.z-normal {
		position: static;
	}
	.z-contain {
		position: relative;
	}
	// sometimes add z-[n], n is int
	.z-layer {
		position: absolute;
	}
}
